<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_block_roulett</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0;
image_index = irandom(2);
check = 0;
match[0] = 0; //center |
match[1] = 0; //center -
match[2] = 0; //  /
match[3] = 0; //  \
match[4] = 0; //top -
match[5] = 0; //bottom -
match[6] = 0; //left |
match[7] = 0; //right |
flash = 0;
total = 0;
rewards = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make player win is there's no mushroom left
if !(instance_exists(o_mushroom))
{
    var _x;
    _x = instance_create(o_player.x,o_player.y,o_player_bonus_win);
    _x.gravity = o_player.gravity;
    _x.vspeed = o_player.vspeed;
    _x.image_xscale = o_player._xscale;
    with (o_player) instance_destroy();
}
else
{
    alarm[3] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///swap flashing line color
if (flash == 0)
{
    flash = 1;
}
else
{
    flash = 0;
}
alarm[2] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///give rewards
if (rewards &gt;= 1)
{
    rewards -= 1;
    sound_ps(snd_sprout,0,0);
    var _shroom, _fx;
    _fx = instance_create(376+8,96+12,o_fx_smoke);
    _fx.image_speed = 0.2;
    _shroom = instance_create(376,96,o_mushroom);
    _shroom.sprite_index = s_mushroom_1up;
    _shroom.hspeed = -1;
    _shroom.vspeed = -6;
    alarm[1] = 60;
}
else
{
    alarm[3] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///begin check
event_user(0);
check = 3;
alarm[1] = 60;
alarm[2] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if other blocks are done
var _done;
_done = 1;

with (o_bblock_other)
{
    if (image_speed &lt;&gt; 0)
    {
        _done = 0;
        break;
    }
}


if (_done == 1) &amp;&amp; (check == 0)
{
    check = 1;
    o_bblock_other.used = 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///begin matching
var _done;
_done = 1;

with (o_bblock_other)
{
    if (speed &lt;&gt; 0)
    {
        _done = 0;
        break;
    }
}


if (_done == 1) &amp;&amp; (check == 1)
{
    check = 2;
    alarm[0] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render the check lines
if (check == 3)
{
    //init line
    if (flash == 0)
    {
        draw_set_color($FFFFFF);
    }
    else
    {
        draw_set_color(make_color_rgb(248,184,0));
    }
    var lw;
    lw = 3;
    
    //0 C|
    if (match[0] == 1)
    {
        draw_line_width(x+8,y-40,x+8,y+56,lw);
    }
    
    //1 C-
    if (match[1] == 1)
    {
        draw_line_width(x-40,y+8,x+56,y+8,lw);
    }
    
    //2 /
    if (match[2] == 1)
    {
        draw_line_width(x-40,y+56,x+56,y-40,lw);
    }
    
    //3 \
    if (match[3] == 1)
    {
        draw_line_width(x+56,y+56,x-40,y-40,lw);
    }
    //4 T-
    if (match[4] == 1)
    {
        draw_line_width(x-40,y-40,x+56,y-40,lw);
    }
    //5 B-
    if (match[5] == 1)
    {
        draw_line_width(x-40,y+56,x+56,y+56,lw);
    }
    //6 L|
    if (match[6] == 1)
    {
        draw_line_width(x-40,y-40,x-40,y+56,lw);
    }
    //7 R|
    if (match[7] == 1)
    {
        draw_line_width(x+56,y-40,x+56,y+56,lw);
    }
    draw_set_color($FFFFFF);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render me
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_explode(x+8,y+8,1.5,0.5,0,0,2,-5);
scr_explode(x+8,y+8,1,0.5,-0.5,-0.5,-1,-5);
scr_explode(x+8,y+8,1,0.5,-0.5,0.5,-1,-5);
scr_explode(x+8,y+8,1,0.5,0.5,-0.5,-1,-5);
scr_explode(x+8,y+8,1,0.5,0.5,0.5,-1,-5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 0 (center | )
var _a, _aa, _b, _bb;
_a = 0;
if (collision_line(x+8,y+8,x+8,y-80,o_bblock_other,1,0))
{
    _aa = collision_line(x+8,y+8,x+8,y-80,o_bblock_other,1,0);
    if (round(_aa.image_index) == round(self.image_index))
    {
        _a = 1;
    }
}

_b = 0;
if (collision_line(x+8,y+8,x+8,y+80,o_bblock_other,1,0))
{
    _bb = collision_line(x+8,y+8,x+8,y+80,o_bblock_other,1,0);
    if (round(_bb.image_index) == round(self.image_index))
    {
        _b = 1;
    }
}

if (_a+_b == 2)
{
    match[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 1 (center - )
var _a, _aa, _b, _bb;
_a = 0;
if (collision_line(x+8,y+8,x-80,y+8,o_bblock_other,1,0))
{
    _aa = collision_line(x+8,y+8,x-80,y+8,o_bblock_other,1,0);
    if (round(_aa.image_index) == round(self.image_index))
    {
        _a = 1;
    }
}

_b = 0;
if (collision_line(x+8,y+8,x+80,y+8,o_bblock_other,1,0))
{
    _bb = collision_line(x+8,y+8,x+80,y+8,o_bblock_other,1,0);
    if (round(_bb.image_index) == round(self.image_index))
    {
        _b = 1;
    }
}

if (_a+_b == 2)
{
    match[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 2 ( / )
var _a, _aa, _b, _bb;
_a = 0;
if (collision_line(x+8,y+8,x+80,y-80,o_bblock_other,1,0))
{
    _aa = collision_line(x+8,y+8,x+80,y-80,o_bblock_other,1,0);
    if (round(_aa.image_index) == round(self.image_index))
    {
        _a = 1;
    }
}

_b = 0;
if (collision_line(x+8,y+8,x-80,y+80,o_bblock_other,1,0))
{
    _bb = collision_line(x+8,y+8,x-80,y+80,o_bblock_other,1,0);
    if (round(_bb.image_index) == round(self.image_index))
    {
        _b = 1;
    }
}

if (_a+_b == 2)
{
    match[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 3 ( \ )
var _a, _aa, _b, _bb;
_a = 0;
if (collision_line(x+8,y+8,x-80,y-80,o_bblock_other,1,0))
{
    _aa = collision_line(x+8,y+8,x-80,y-80,o_bblock_other,1,0);
    if (round(_aa.image_index) == round(self.image_index))
    {
        _a = 1;
    }
}

_b = 0;
if (collision_line(x+8,y+8,x+80,y+80,o_bblock_other,1,0))
{
    _bb = collision_line(x+8,y+8,x+80,y+80,o_bblock_other,1,0);
    if (round(_bb.image_index) == round(self.image_index))
    {
        _b = 1;
    }
}

if (_a+_b == 2)
{
    match[3] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 4 (top - )
var _a, _aa, _b, _bb, _c, _cc;
_a = 0;
if (collision_point(x-40,y-40,o_bblock_other,1,0))
{
    _aa = collision_point(x-40,y-40,o_bblock_other,1,0);
    _a = round(_aa.image_index);
}

_b = 0;
if (collision_point(x+56,y-40,o_bblock_other,1,0))
{
    _bb = collision_point(x+56,y-40,o_bblock_other,1,0);
    _b = round(_bb.image_index);
}

_c = 0;
if (collision_point(x+8,y-40,o_bblock_other,1,0))
{
    _cc = collision_point(x+8,y-40,o_bblock_other,1,0);
    _c = round(_cc.image_index);
}

if (_a == _b) &amp;&amp; (_b == _c)
{
    match[4] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 5 (bottom - )
var _a, _aa, _b, _bb, _c, _cc;
_a = 0;
if (collision_point(x-40,y+56,o_bblock_other,1,0))
{
    _aa = collision_point(x-40,y+56,o_bblock_other,1,0);
    _a = round(_aa.image_index);
}

_b = 0;
if (collision_point(x+56,y+56,o_bblock_other,1,0))
{
    _bb = collision_point(x+56,y+56,o_bblock_other,1,0);
    _b = round(_bb.image_index);
}

_c = 0;
if (collision_point(x+8,y+56,o_bblock_other,1,0))
{
    _cc = collision_point(x+8,y+56,o_bblock_other,1,0);
    _c = round(_cc.image_index);
}

if (_a == _b) &amp;&amp; (_b == _c)
{
    match[5] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 6 (left | )
var _a, _aa, _b, _bb, _c, _cc;
_a = 0;
if (collision_point(x-40,y-40,o_bblock_other,1,0))
{
    _aa = collision_point(x-40,y-40,o_bblock_other,1,0);
    _a = round(_aa.image_index);
}

_b = 0;
if (collision_point(x-40,y+56,o_bblock_other,1,0))
{
    _bb = collision_point(x-40,y+56,o_bblock_other,1,0);
    _b = round(_bb.image_index);
}

_c = 0;
if (collision_point(x-40,y+8,o_bblock_other,1,0))
{
    _cc = collision_point(x-40,y+8,o_bblock_other,1,0);
    _c = round(_cc.image_index);
}

if (_a == _b) &amp;&amp; (_b == _c)
{
    match[6] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MATCH 7 (right | )
var _a, _aa, _b, _bb, _c, _cc;
_a = 0;
if (collision_point(x+56,y-40,o_bblock_other,1,0))
{
    _aa = collision_point(x+56,y-40,o_bblock_other,1,0);
    _a = round(_aa.image_index);
}

_b = 0;
if (collision_point(x+56,y+56,o_bblock_other,1,0))
{
    _bb = collision_point(x+56,y+56,o_bblock_other,1,0);
    _b = round(_bb.image_index);
}

_c = 0;
if (collision_point(x+56,y+8,o_bblock_other,1,0))
{
    _cc = collision_point(x+56,y+8,o_bblock_other,1,0);
    _c = round(_cc.image_index);
}

if (_a == _b) &amp;&amp; (_b == _c)
{
    match[7] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count the bonuses
var i;
for (i = 0; i &lt;= 7; i++)
{
    total += match[i];
}

rewards = total;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get draw code
event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
