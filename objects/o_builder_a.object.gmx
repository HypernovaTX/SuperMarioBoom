<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
//_obj[x,y] = 0;
//_obj_w[x,y] = 0;
//_obj_h[x,y] = 0;
//_tile_x[x,y] = 0;
//_tile_y[x,y] = 0;
//_tile_w[x,y] = 0;
//_tile_h[x,y] = 0;
depth = -100000000;
var X, Y;
RM = 0;
load = 0;

for (i = 0; i &lt;= 15; i ++)
{
    rm_obj[i] = ds_grid_create(32,15);
    rm_obj_w[i] = ds_grid_create(32,15);
    rm_obj_h[i] = ds_grid_create(32,15);
    rm_tile_x[i] = ds_grid_create(32,15);
    rm_tile_y[i] = ds_grid_create(32,15);
    rm_tile_l[i] = ds_grid_create(32,15);
    rm_tile_t[i] = ds_grid_create(32,15);
    rm_tile_w[i] = ds_grid_create(32,15);
    rm_tile_h[i] = ds_grid_create(32,15);
}

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///place objects and tiles on the level
var A, B, C;
pick[0] = irandom(14);
do { pick[1] = irandom(14); } until (pick[1] &lt;&gt; pick[0])
do { pick[2] = irandom(14); } until (pick[2] &lt;&gt; pick[0]) &amp;&amp; (pick[2] &lt;&gt; pick[1])
do { pick[3] = irandom(14); } until (pick[3] &lt;&gt; pick[0]) &amp;&amp; (pick[3] &lt;&gt; pick[1]) &amp;&amp; (pick[3] &lt;&gt; pick[2])
do { pick[4] = irandom(14); } until (pick[4] &lt;&gt; pick[0]) &amp;&amp; (pick[4] &lt;&gt; pick[1]) &amp;&amp; (pick[4] &lt;&gt; pick[2]) &amp;&amp; (pick[4] &lt;&gt; pick[3])
do { pick[5] = irandom(14); } until (pick[5] &lt;&gt; pick[0]) &amp;&amp; (pick[5] &lt;&gt; pick[1]) &amp;&amp; (pick[5] &lt;&gt; pick[2]) &amp;&amp; (pick[5] &lt;&gt; pick[3]) &amp;&amp; (pick[5] &lt;&gt; pick[4])
pick[6] = 15;
for (A = 0; A &lt;= 6; A ++)
{
    for (B = 0; B &lt; 32; B ++)
    {
        for (C = 0; C &lt; 15; C ++)
        {
            var _ooo;
            _ooo = noone;
            _ooo = ds_grid_get(rm_obj[pick[A]],B,C);
            if (_ooo &lt;&gt; noone)
            {
                var _go;
                _go = noone;
                _go = instance_create((512*A)+(B*16),C*16,_ooo);
                //show_message('created: '+object_get_name(_ooo));
                if (_go &lt;&gt; noone)
                {
                    _go.image_xscale = ds_grid_get(rm_obj_w[pick[A]],B,C);
                    _go.image_yscale = ds_grid_get(rm_obj_h[pick[A]],B,C);
                }
            }
            var XxX, YyY, LlL, TtT, WwW, HhH;
            XxX = ds_grid_get(rm_tile_x[pick[A]],B,C);
            YyY = ds_grid_get(rm_tile_y[pick[A]],B,C);
            LlL = ds_grid_get(rm_tile_l[pick[A]],B,C);
            TtT = ds_grid_get(rm_tile_t[pick[A]],B,C);
            WwW = ds_grid_get(rm_tile_w[pick[A]],B,C);
            HhH = ds_grid_get(rm_tile_h[pick[A]],B,C);
            if (XxX &lt;&gt; -5)
            {
                var _rT;
                switch (room)
                {
                    case (rm_world1): _rT = bg_tileset_smb3; break;
                    case (rm_world2): _rT = bg_tileset_cave; break;
                    case (rm_world3): _rT = bg_tileset_night; break;
                    case (rm_world4): _rT = bg_tileset_forest; break;
                    default: _rT = bg_tileset_smb3; break;
                }
                tile_add(_rT,LlL,TtT,WwW,HhH,(512*A)+(XxX),YyY,1000000);
            }
            load += 1;
        }
    }
}

switch (room)
{
    case(rm_world1): global.kind = 1; break;
    case(rm_world2): global.kind = 2; break;
    case(rm_world3): global.kind = 3; break;
    case(rm_world4): global.kind = 4; break;
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///read all info from the current room
var X, Y;
for (X = 0; X &lt; 32; X++)
{
    for (Y = 0; Y &lt; 15; Y++)
    {
        ds_grid_set(rm_obj[RM],X,Y,noone);
        ds_grid_set(rm_obj_w[RM],X,Y,1);
        ds_grid_set(rm_obj_h[RM],X,Y,1);
        ds_grid_set(rm_tile_x[RM],X,Y,-5);
        ds_grid_set(rm_tile_y[RM],X,Y,-5);
        ds_grid_set(rm_tile_l[RM],X,Y,-5);
        ds_grid_set(rm_tile_t[RM],X,Y,-5);
        ds_grid_set(rm_tile_w[RM],X,Y,-5);
        ds_grid_set(rm_tile_h[RM],X,Y,-5);
        //get all obj
        ID = noone;
        OX = 1;
        OY = 1;
        with (all)
        {
            move_snap(16,16);
            if (object_get_name(object_index) != 'o_SYSTEM')
            &amp;&amp; (object_get_name(object_index) != 'o_builder_a')
            {
                ds_grid_set(o_builder_a.rm_obj[o_builder_a.RM],x/16,y/16,self.object_index);
                ds_grid_set(o_builder_a.rm_obj_w[o_builder_a.RM],x/16,y/16,self.image_xscale);
                ds_grid_set(o_builder_a.rm_obj_h[o_builder_a.RM],x/16,y/16,self.image_yscale);
            }
        }
        
        //get all tiles
        _tile_x = -5;
        _tile_y = -5;
        _tile_w = -5;
        _tile_h = -5;
        _tile_l = -5;
        _tile_t = -5;
        var T;
        T = tile_layer_find(1000000,X*16,Y*16);
        if (T &lt;&gt; -1)
        {
            _tile_x = tile_get_x(T);
            _tile_y = tile_get_y(T);
            _tile_l = tile_get_left(T);
            _tile_t = tile_get_top(T);
            _tile_w = tile_get_width(T);
            _tile_h = tile_get_height(T);
        }
        ds_grid_set(rm_tile_x[RM],X,Y,_tile_x);
        ds_grid_set(rm_tile_y[RM],X,Y,_tile_y);
        ds_grid_set(rm_tile_l[RM],X,Y,_tile_l);
        ds_grid_set(rm_tile_t[RM],X,Y,_tile_t);
        ds_grid_set(rm_tile_w[RM],X,Y,_tile_w);
        ds_grid_set(rm_tile_h[RM],X,Y,_tile_h);
    }
}

RM += 1;
if (RM &lt;= 15)
{
    alarm[0] = 2;
}
else
{
    var _go;
    if (global.kind == 0)
    {
        _go = choose(rm_world1,rm_world4,rm_world3,rm_world2);
    }
    else if (global.kind == 1)
    {
        _go = choose(rm_world4,rm_world3,rm_world2);
    }
    else if (global.kind == 2)
    {
        _go = choose(rm_world3,rm_world4,rm_world1);
    }
    else if (global.kind == 3)
    {
        _go = choose(rm_world4,rm_world1,rm_world2);
    }
    else if (global.kind == 4)
    {
        _go = choose(rm_world1,rm_world2,rm_world3);
    }
    room_goto(_go);
    alarm[2] = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///go to template rooms
switch (RM)
{
    case(0): room_goto(rm_a); break;
    case(1): room_goto(rm_b); break;
    case(2): room_goto(rm_c); break;
    case(3): room_goto(rm_d); break;
    case(4): room_goto(rm_e); break;
    case(5): room_goto(rm_f); break;
    case(6): room_goto(rm_g); break;
    case(7): room_goto(rm_h); break;
    case(8): room_goto(rm_i); break;
    case(9): room_goto(rm_j); break;
    case(10): room_goto(rm_k); break;
    case(11): room_goto(rm_l); break;
    case(12): room_goto(rm_m); break;
    case(13): room_goto(rm_n); break;
    case(14): room_goto(rm_o); break;
    case(15): room_goto(rm_final1); break;
}
alarm[1] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color($000000);
draw_rectangle(0,0,display_get_width(),display_get_height(),0);

draw_set_color($FFFFFF);
draw_set_font(font_add_sprite(s_font,ord('!'),0,0));
if (load == 0)
{
    draw_text(2,2,"Loading level - "+string(RM)+" / 16");
}
else
{
    draw_text(2,2,"Generating level - "+string(load)+" / 3360");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
